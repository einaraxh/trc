<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Royal Council</title>
    <link rel="stylesheet" type="text/css" href="css/style.css"/>
    </head>
<body>
    <audio src="assets/Metalican.mp3" id="Metalican" loop="loop"></audio>
    
    <div class="maindiv">
        <div class="mindiv">
        </div>
        <div class="countdown">
            <div class="time" id="days"></div>
            <div class="time" id="hours"></div>
            <div class="time" id="mins"></div>
            <div class="time" id="secs"></div>
        </div>
    </div>
    <div class="maindiv2">
    </div>
</body>

<script>
    var audio = document.getElementById("Metalican");
    audio.volume = 0.35;

    window.onload = function () {
        document.onclick = function () {
            document.getElementById("Metalican").play()
        }
    }

    setInterval(() => {

        let random=perlin.get(Date.now()/3000, 0)
        random += 0.5

        var csslight = document.querySelector(".maindiv2")
        csslight.style.setProperty('--t', random);
    }, 1000/30)

    var countDownDate = new Date("Feb 8, 2023 12:00:00").getTime();
    var myfunc = setInterval(function() {
        var now = new Date().getTime();
        var timeleft = countDownDate - now;
            
        var days = Math.floor(timeleft / (1000 * 60 * 60 * 24));
        var hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeleft % (1000 * 60)) / 1000);

        document.getElementById("days").innerHTML = days + " days "
        document.getElementById("hours").innerHTML = hours + " hours " 
        document.getElementById("mins").innerHTML = minutes + " minutes " 
        document.getElementById("secs").innerHTML = seconds + " seconds"
    }, 1000)

    let perlin = {
        rand_vect: function () {
            let theta = Math.random() * 2 * Math.PI;
            return { x: Math.cos(theta), y: Math.sin(theta) };
        },
        dot_prod_grid: function (x, y, vx, vy) {
            let g_vect;
            let d_vect = { x: x - vx, y: y - vy };
            if (this.gradients[[vx, vy]]) {
                g_vect = this.gradients[[vx, vy]];
            } else {
                g_vect = this.rand_vect();
                this.gradients[[vx, vy]] = g_vect;
            }
            return d_vect.x * g_vect.x + d_vect.y * g_vect.y;
        },
        smootherstep: function (x) {
            return 6 * x ** 5 - 15 * x ** 4 + 10 * x ** 3;
        },
        interp: function (x, a, b) {
            return a + this.smootherstep(x) * (b - a);
        },
        seed: function () {
            this.gradients = {};
            this.memory = {};
        },
        get: function (x, y) {
            if (this.memory.hasOwnProperty([x, y]))
                return this.memory[[x, y]];
            let xf = Math.floor(x);
            let yf = Math.floor(y);
            //interpolate
            let tl = this.dot_prod_grid(x, y, xf, yf);
            let tr = this.dot_prod_grid(x, y, xf + 1, yf);
            let bl = this.dot_prod_grid(x, y, xf, yf + 1);
            let br = this.dot_prod_grid(x, y, xf + 1, yf + 1);
            let xt = this.interp(x - xf, tl, tr);
            let xb = this.interp(x - xf, bl, br);
            let v = this.interp(y - yf, xt, xb);
            this.memory[[x, y]] = v;
            return v;
        }
    }
    perlin.seed();
</script>
</html>